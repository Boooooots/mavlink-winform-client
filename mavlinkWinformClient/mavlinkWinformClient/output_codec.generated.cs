

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
    
namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{0, new MavPacketInfo(Deserialize_HEARTBEAT, 50)},
		};

		internal static MavlinkMessage Deserialize_HEARTBEAT(byte[] bytes, int offset)
		{
			return new Msg_heartbeat
			{
				custom_mode = bitconverter.ToUInt32(bytes, offset + 0),
				type = bytes[offset + 4],
				autopilot = bytes[offset + 5],
				base_mode = bytes[offset + 6],
				system_status = bytes[offset + 7],
				mavlink_version = bytes[offset + 8],
			};
		}

		internal static int Serialize_HEARTBEAT(this Msg_heartbeat msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.custom_mode, bytes, offset + 0);
			bytes[offset + 4] = msg.type;
			bytes[offset + 5] = msg.autopilot;
			bytes[offset + 6] = msg.base_mode;
			bytes[offset + 7] = msg.system_status;
			bytes[offset + 8] = msg.mavlink_version;
			offset += 9;
			return 0;
		}
	}

}

